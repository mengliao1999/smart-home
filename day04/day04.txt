【复习】
1. printf/scanf标准输入输出的函数

2. if...else... 分支语句
	1》if 
	if (条件表达式) {
		语句块;
	}
	2. if...else...
	if (条件表达式) {
		语句块;
	} else {
		语句块;
	}
	3. if ... else if ... ... else...
	if (条件表达式) {
		语句块;
	} else if(条件表达式) {
		语句块;
	} else if(条件表达式) {
		语句块;
	} 
	....
	else {
		语句块;
	}

3. switch case 分支语句

	switch (常量表达式) {
		case 常量:
			语句块;
			break;
		case 常量:
			语句块;
			break;
		...
		default:
			语句块;
			break;
	}

4. for 循环
	
	for(赋值表达式1;比较表达式2;运算表达式3) {
		语句块4;
	}

	[1,2][4,3,2][4,3,2].....[4,3,2]
	
	比较表达式2不成立，退出for循环。
	
	for循环可以进行嵌套：
		具有二维特性数组
	for(赋值表达式1;比较表达式2;运算表达式3) {
		for(赋值表达式4;比较表达式5;运算表达式6) {
			语句块7;
		}
		语句块8;
	}


	*
	**
	***
	****
	*****
	j   i  j*i
	1 * 1 = 1
	1 * 2 = 2 2 * 2 = 4
	....

	作业1：九九乘法表

###################################
【1】 while / do ... while 循环
	语法格式：
	while (条件表达式1) {
		语句块2;
	}
	[1][2,1][2,1]....[2.1]
	如果条件表达式1不成立退出while循环
	
	do {
		语句块1;
	} while (条件表达式2);
	[1,2][1,2][1,2]....[1,2]
	如果条件表达式2不成立退出while循环

	参考代码： 
	实现0-100所有数的相加之和

	#include <stdio.h>
	int main(int argc, const char *argv[])
	{
		int i = 0, sum = 0;  // 局部变量，变量中的值随机
		while(i <= 100) {
			sum += i;
			i++;
		}   
		printf("sum = %d\n",sum);
		return 0;                                                                       
	}
	------------------------------
	#include <stdio.h>                                                                  
	int main(int argc, const char *argv[])
	{
		int i = 0, sum = 0;  // 局部变量，变量中的值随机
		do {
			sum += i;
			i++;
		} while(i <= 100);
		printf("sum = %d\n",sum);
		return 0;
	}
	
	练习题： 
	
	将100-999 之间的所有的水仙花数打印出来。
	
	此数的每一位的立方之和等于这个数本身，
	这样的数称为水仙花数。
	g*g*g + s*s*s + b*b*b = bsg;
	
	练习时间到10:15
【2】数组
1. 一维数组
	1> 数组的定义
	几个相同的数据类型，存在一块连续的内存空间中，
	这个的数据可以使用数组的方式进行定义。
	--------
	|		|   int a = 1111;
	--------
	|		|   int b = 2222;
	--------
	|		|   int c = 3333;
	--------
	|		|   int d = 4444;
	--------
	2> 如何定义一个数组 
	
		数据类型   数组名[数组的长度];
		int  array[4];

	3> 对数组中的成员进行初始化
		1) 定义数组的同时进行初始化
			int arr[4] = {0};   // 全部初始化为0
			int arr[4] = {1,2}; // 对部分成员初始化
			int arr[4] = {1,2,3,4}; // 全部成员初始化
			// 字符串常量对字符数组进行初始化
			char str[10] = "hello";
			// 字符数组
			char str[10] = {'h','e','l','l','o'};
			
			
		2) 先定义数组，后进行初始化
			int arr[4];
			arr[0] = 1;  // 第0个成员初始化
			arr[1] = 2;  // 第1个成员初始化
			arr[2] = 3;  // 第2个成员初始化
			arr[3] = 4;  // 第3个成员初始化
			注意：数组的成员从0开始计算
			arr[4] = {1,2,3,4};   // 错误

			// 字符串常量对字符数组进行初始化
			char str[10];
			str = "hello";   // 错误
			/* 字符串拷贝的函数
				将hello字符串拷贝到str数组中
				数组的名字是数组的首地址
			*/
			strcpy(str,"hello");   //正确的
			// 字符数组
			char str[10];
			str[0] = 'h';
			str[1] = 'e';
			str[2] = 'l';
			str[3] = 'l';
			str[4] = 'o';
	4> 数组中成员的访问
		数组名[成员编号];
		
		int arr[4] = {1,2,3,4};
		int a = arr[0];
		int b = arr[1];
		....
	参考代码： 05array.c 
	#include <stdio.h>                                                                                                         

	int main(int argc, const char *argv[])
	{
		// 定义int类型数组
		// 数组的长度是10，数组名为arr
		// 并对数组进行初始化
		int arr[10] = {1,2,3,4,5,6,7,8,9,10};
		
		// 访问数组中的所有成员并打印到屏幕上
		int i ; 
		for(i = 0; i < 10; i++) {
			printf("arr[%d] = %d\n", i, arr[i]);
		}   

		printf("%d %d\n", sizeof(arr), sizeof(int));

		for(i = 0;i < sizeof(arr)/sizeof(int); i++) {
			printf("arr[%d] = %d\n", i, arr[i]);
		}   

		return 0;
	}
	
	练习题：
	定义一个数组，通过键盘输入的方式对数组成员进行初始化；
	并打印所有的结果。
	
	练习时间到11:10分
	
	练习题：
	定义一个int类型的数组，数组成员的个数为10个，
	通过键盘输入的方式对数组中的成员进行初始化，
	使用冒泡排序的方式对数组进行从小到大的方式进行排序，
	，并将排序的结果打印到终端上。
	
	冒泡排序的参考文档：
	https://www.cnblogs.com/bigdata-stone/p/10464243.html
	
	用到的知识点：
	for循环 
	for循环的嵌套
	if 
	变量
	运算符
	
	练习时间到11:50
	
	
	如果不指定数组的长度，必须对数组进行初始化，
	数组的长度就是数组初始化成员的个数
	int arr[] = {1,2,3,4,5};
	
	int arr[];
	arr[0] = 1 ; // 错误
	C89标准不支持可变数组长度
	
	"hello" : 字符串的结尾都是'\0'
	
【3】指针类型的变量	
	1. 在计算机内存的存储空间(简称内存)，
	内存是有地址，对于内存的访问时通过内存的地址实现。
	内存访问的最下单位是以字节为单位。
	
	4G内存     0x00000000 ~ 0xFFFFFFFF
	
	0x00000001   内存的第一个字节
	0x20008000   内存第0x20008000字节的地址
	
	2. 在C语言中，内存单元的地址称之为指针，
	专门用来存放内存地址的变量，称之为指针类型的变量。
	
	3. 定义指针类型的变量(32位操作系统)
		数据类型 *指针变量名 = 内存地址;
	
		注意：指针类型的变量占4个字节内存空间
		
		char *ch;  占4个字节内存空间
		int *a;    占4个字节内存空间
		double *d; 占4个字节内存空间
		
		原因：指针变量中存放的是地址，地址都是4个字节长度。
	
		eg:
		char ch = 'a';
		char *p_c = &ch;
		
		int a = 100;
		int *p_a = &a;
		
		short s = 1000;
		short *p_s;
		p_s = &a;
		
	4. 对于指针类型变量的使用
		int a = 1000;
		int *p = &a;
	
		p : 指针类型的变量存放的是地址   p = &a;
		*p : 指向p中存放地址的内存空间的值 *p = a;

	参考代码： 08pointer.c
	
		char *str = "hello world";
		str中存放的是字符串的首地址，
		通过字符串的首地址既可以访问整个字符串

		指针的理解：指针.png 

	#include <stdio.h>                                                                                                                       

	int main(int argc, const char *argv[])
	{
		char ch = 'A';
		char *p_c = &ch;

		printf("ch = %c &ch = %p length = %d\n",
				ch, &ch, sizeof(char));
		printf("*p_c = %c p_c = %p length = %d\n",
				*p_c, p_c, sizeof(char *));

		int a = 0x12345678;
		int *p = &a;
		printf("a = %#x &a = %p length = %d\n",
				a, &a, sizeof(int));
		printf("*p = %#x p = %p length = %d\n",
				*p, p, sizeof(int *));
		return 0;
	}

	main(int argc, const char *argv[])
	
	在执行程序是可以给主函数传递参数，
	主函数通过两个形参来获取执行程序是传递的参数。
	
	./a.out  abc  def
	
	argc = 3;
	
	argv[0] = "./a.out"字符串的首地址;
	argv[1] = "abc"字符串的首地址;
	argv[2] = "def"字符串的首地址;
	
	09param.c
	
	
	
	
	
	
	
	
	
	




	