 
【1】内核空间和用户之间的数据传递
	#include <linux/uaccess.h>
1. 用户空间传递数据到内核空间  copy_from_user
	int copy_from_user(void *to, const void __user *from, int n)
	函数功能：从用户空间拷贝数据到内核空间
	函数参数：
		to ：内核空间缓冲区的首地址 
		from ： 用户空间缓冲区的首地址
		n ： 拷贝字节的个数
	返回值：
		成功：返回0
		失败：返回未拷贝字节的个数。
	
2. 内核空间传递数据到用户空间  copy_to_user
	int copy_to_user(void __user *to, const void *from, int n)
	函数功能：从内核空间拷贝数据到用户空间
	函数参数：
		to ：用户空间缓冲区的首地址 
		from ： 内核空间缓冲区的首地址
		n ： 拷贝字节的个数
	返回值：
		成功：返回0
		失败：返回未拷贝字节的个数。
 
 
【2】安装交叉编译器
	驱动程序运行到开发板之后，需要使用交叉编译器编译程序。
		PC				 开发板、
		 |					|
		gcc              交叉编译
		 |					|
		X86架构   		  ARM架构
	
	
	1. 在ubuntu的家目录下创建toolchain目录 
		mkdir toolchain 
	2. 拷贝下载的gcc-4.5.1.tar.bz2 压缩包到toolchain目录下
	
	3. 执行以下命令对压缩包进行解压缩
		cd  toolchain
		tar -vxf gcc-4.5.1.tar.bx2
	4. 配置环境变量 
		打开bash.bashrc文件
		sudo vi /etc/bash.bashrc
		
		在会后一行添加以下内容：
		export PATH=$PATH:/home/hqyj/toolchain/gcc-4.5.1/bin/ 
		
	5. 使配置的环境变量立即生效
		source /etc/bash.bashrc
	
	6. 测试交叉编译器是否安装成功
		arm-none-linux-gnueabi-gcc -v
		
		打印以下信息表示安装成功：
		gcc version 4.5.1 (Sourcery G++ Lite 2010.09-50) 

【3】编译linux内核源码
	1. 在ubuntu的家目录下创建kernel文件
		mkdir kernel 
	2. 拷贝kernel-3.4.39-ok.tar压缩包到kernel目录下
	
	3. 进入到kernel目录下进行解压缩
		cd kernel 
		tar -vxf kernel-3.4.39-ok.tar
	
	4. 进入到kernel-3.4.39目录下
		cd kernel-3.4.39
	
	5. 执行命令配置内核源码，支持S5P6818硬件平台
		make fs6818_defconfig
		
	6. 执行命令编译内核源码 
		make -j4 uImage
		
		编译过程大概需要20-30分钟。
	
	7. 出现mkimage 命令没有发现的错误执行以下命令： 
		sudo apt-get install u-boot-tools
 
 
【4】修改led灯驱动的源码，让驱动程序可以再开发板上运行 
	修改Makefile 
 
【5】物理地址到虚拟地址之间的映射
	原因：内核不让直接操作物理地址，需要使用函数将物理地址映射为虚拟地址。
	1. 物理地址到虚拟地址之间的映射： ioremap
	void *ioremap(phys_addr_t offset, unsigned long size)
	函数功能： 完成物理地址到虚拟地址之间的映射
	函数参数：
		offset：映射物理地址的基地址
		size：映射的大小，以字节为单位
	返回值： 
		成功：返回映射成功的虚拟地址
		失败：返回NULL
	
	2. 取消物理地址到虚拟地址之间的映射 ：iounmap
	void iounmap(void __iomem *addr)
	函数功能：取消物理地址到虚拟地址之间的映射 
	函数参数： 
		addr:虚拟地址
	返回值：无
	
	
【6】LED灯驱动
1. 分析电路图 
	参考图：led灯电路图.png 
		
		
2. 分析芯片手册编写代码
	P1_0  = 1; 
	P1_0  = 0;
	分析芯片手册的16章节。
	
	1》 设置GPIO引脚位GPIO功能：原因是s5p6818芯片的大多数引脚都是多功能复用引脚
	红灯：gpioa28
	GPIOAALTFN1  0xC001A024    [25:24] = 00
	绿灯：gpioe13
	GPIOEALTFN0  0xC001E020    [27:26] = 00
	蓝灯：gpiob12
	GPIOBALTFN0  0xC001B020    [25:24] = 10
	
	2》 设置GPIO引脚位输出功能
	红灯：gpioa28
	GPIOAOUTENB  0xC001A004    [28] = 1
	绿灯：gpioe13
	GPIOEOUTENB  0xC001E004    [13] = 1
	蓝灯：gpiob12
	GPIOBOUTENB  0xC001B004    [12] = 1
		
	3》 设置GPIO引脚输出高低电平
	红灯：gpioa28
	GPIOAOUT  0xC001A000    [28] = 1 ：输出高电平
							[28] = 0 ：输出低电平
	绿灯：gpioe13
	GPIOEOUT  0xC001E000    [13] = 1 ：输出高电平
							[13] = 0 ：输出低电平
	蓝灯：gpiob12
	GPIOBOUT  0xC001B000    [12] = 1 ：输出高电平
							[12] = 0 ：输出低电平
 
 
	编写驱动代码，往对应的地址中写入对应的值即可。
 
 
	作业： 
		1. 完成led灯驱动代码的编写
		2. 编写应用程序，实现3个led灯的交替闪烁
 
 
 
 
 