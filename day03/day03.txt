
1. 基本数据类型
	有符号的数据类型：
	char 
	short 
	int 
	long int 
	long long int 
	float
	double
	无符号的数据类型：前边加unsigned 

2. C语言中变量的定义 

	数据类型  变量名 = 初始值;
	
	变量名： 
		1. 由数字，字母，下划线三种符号任意组成
		2. 不能以数字开头
		3. 不能是C语言中的关键字
		4. 见名之意 ---》英文单词，或单词的前几个字母
	
	如果是字符使用单引号括起来---》 'a' 'b' '1'
	定义字符类型的变量：
	char ch = 'a';
	
	如果是字符串使用双引号括起来---》"hello" "world" "nozuonodie"
	char *str = "hello";       //字符指针
	char str[24] = "world";    // 字符数组

3. sizeof运算符的使用
	sizeof(数据类型);  // 计算数据类型所占内存空间的大小
					// 以字节为单位
					// 返回的是数据类型的大小
	printf("size = %d\n", sizeof(int));
	
	unsigned int size = sizeof(int);
	printf("size = %d\n", size);
4. printf函数的使用
	保准打印函数，将打印信息默认打印到屏幕
	
	格式化符号：
	%d    整形
	%c    字符
	%s    字符串
	%f    浮点数
	%u    无符号整形
	%ld   长整形
	%lld  长长整形

5. C语言中的运算符
	单目运算符：（重点）
		++   自动加1   a++   等价于  a = a + 1
		--   自动减1   a--   等价于  a = a - 1
		*    取值
		&    取地址
		!    非      真变假  假变真    0是假， 其他都是真
	算数运算符:（重点）
		+    c = a + b 
		-    c = a - b
		* 
		/(取商) 
		%(取余)
	关系运算符（重点）
	    <    小于 
		>  	大于	
		!=  不等于
		<= 	小于等于
		>=  大于等于
		==  等于

	逻辑运算符 （重点）
		&&  逻辑与
		||  逻辑或
	条件运算符 (三目运算符)  --> (条件判断)?表达式1:表达式2 重点
		a>b?a:b
		
		条件判断成立，取表达式1的结果；条件判断不成立，取表达式2的结果
		
	赋值运算符
		=  += -= *= /=  %=   重点

6. vim 编辑器的使用
	作用： 用于编辑文本文件
	格式  vim/vi   文件文件的名字
		如果文件不存在，则创建文件，并打开文件
		如果文件存在，则打开文件
	
	
	vim编辑器的三种工作模式：
	1> 命令行模式
		用户初次使用vim命令打开编辑文件是，默认处于命令行模式
		
		在命令行模式可以输入一些特定的命令。
		
		/字符串   回车 ：》在文件中进行搜索“字符串”
		
		n           ： 下一个
		shift + n   ： 上一个
		
	2> 插入模式
		可以进入文本编辑，向文件中输入内容
		
		命令行模式 --切换到--》插入模式
		
		
		在命令行模式下，按以下按键才有效
		i ： 在光标所在的位置直接插入(推荐)
		a ： 在光标所在的后一个字符开始插入
		o ： 在光标的下一行开始插入
			
		插入模式 --切换到--》命令行模式：	
		ESC	
		
	3> 底行模式
		命令行模式  --切换到--》底行模式
		shift + :  ---》 由命令行模式进入到底行模式

		在底行出现一个冒号，并且光标在冒号的后边，可以输入一些命令。

		:w    回车    --->   保存
		:q    回车    --->   退出 ， 必须保存之后才能退出
		:wq   回车    --->   保存并对出
		:q!   回车    --->   强制退出，不管是否保存，未保存的内容丢失
		:wq!  回车    --->   强制保存退出，
		
		底行模式 --切换到--》 命令行模式
		ESC  
		ESC + ESC 

	int a = 3, b = 4;
	int x, y;
	x = a++;    // x = 3   a = 4   先赋值，后做加加运算
	printf("a = %d , x = %d\n", a, x);
	
	y = ++b;    // y = 5   b = 5   先做加加运算，后赋值
	printf("b = %d , y = %d\n", b, y);
	
	
	
	
	
	
	课间休息10分钟。

#####################################
#####################################
[1] scanf函数的使用
	标准输入函数，
	从终端(键盘)上输入数据到地址表中
	scanf ("格式控制串", 地址表);
	int a;     // 变量名字前边加&，表示变量的内存地址
	scanf ("%d", &a);
	
	char c;
	scanf ("%c", &c);
	
	char str[24];  // 数组的名字，就是数组的首地址
	scanf ("%s", str);
	
	int x, y;
	scanf("%d%d",&x,&y);

	参考案例：03scanf.c 

[2]分支语句    if...else 
1. if语句
	格式 ：
	if(条件判断) {
		C代码语句块;
	}
	
	如果条件判断成立，C代码语句块代码被执行；
	如果条件判断不成立，C代码语句块代码不被被执行；
	
	案例： 从键盘输入一个数字，判断是否大于等于0。
	04if.c
		#include <stdio.h>

		int main(int argc, const char *argv[])
		{
			int num;
			printf("please a numbers > ");
			scanf("%d", &num);
			if (num >= 0) {                                                                                   
				printf("%d是一个大于等于0的数字\n", num);
			}   
			return 0;
		}
	
2. if...else...语句
	格式：
	if(条件判断) {
		语句块1;
	} else {
		语句块2;
	}
	如果条件判断成立，语句块1 代码被执行；
	如果条件判断不成立，语句块2 代码被执行；

	案例： 从键盘输入一个数字，判断是否大于等于0。
	参考代码：05ifelse.c
		#include <stdio.h>

		int main(int argc, const char *argv[])
		{
			int num;
			printf("please a numbers > ");
			scanf("%d", &num);
			if (num >= 0) {                                                                                   
				printf("%d是一个大于等于0的数字\n", num);
			} else {    
				printf("%d是一个小于0的数字\n", num);
			}   

			return 0;
		}

	练习题：
	从键盘输入年份，计算此年是平年换是闰年
	
	能被4整除，不能被100整除，
	能被100整除，并且能被400整除

	&&  || 
	/  ---> (取商)   
	%  ---> (取余)
	==   条件判断的等号

	if ... else ...

	#include <stdio.h>

	int main(int argc, const char *argv[])
	{
		int year;
		printf("请输入年份 > ");
		scanf("%d", &year);
		
		if((year % 4 == 0 && year % 100 != 0) || (year % 100 == 0 && year % 400 == 0)) {
			printf("%d是闰年\n", year);
		} else {    
			printf("%d是平年\n", year);
		}   
		return 0;                                                                                         
	}

3. if ... else if ... else if ... else ...
	格式： 
	if (条件1) {
		语句块1;
	} else if (条件2) {
		语句块2;
	} else if (条件3) {
		语句块3;
	} 
		....      // 此处省略很多else if 语句
	else {
		语句块n;
	}

	如果条件1成立，执行语句块1，后边的所有if语句都不在进行判断
	如果条件1不成立，判断条件2是否成立，如果条件2成立，执行语句块2，后边的所有if语句都不在进行判断
	如果条件2不成立，判断条件3是否成立，如果条件3成立，执行语句块3，后边的所有if语句都不在进行判断
	.....
	如果上边的if语句中的条件都不成立，执行else中的语句块n。
	
	案例：输入月份，判断月份有多少天。

	#include <stdio.h>                                                                                    

	int main(int argc, const char *argv[])
	{
		int mouth;
		printf("请输入月份 > ");
		scanf("%d", &mouth);
		if (mouth == 1 || mouth == 3 || mouth == 5 || mouth == 7 
				|| mouth == 8 || mouth == 10 || mouth == 12) {
			printf("%d月有31天\n", mouth);
		} else if (mouth == 4 || mouth == 6 || mouth == 9 || mouth == 11) {
			printf("%d月有30天\n", mouth);
		} else if (mouth == 2) {
			printf("%d月有28或着29天\n", mouth);
		} else {
			printf("输入的月份无效\n");
		}   

		return 0;
	}
	
	
	练习题： 
		学生成绩等级测试
		从键盘输入成绩，测试成绩的等级。
		100-90   优秀
		89-70    良好 
		69-60    几个 
		0-59     不及格
	
		>100 或 < 0 无效的成绩
		
		参考代码：08elseif.c
		
	
		
	下午授课内容。
	switch case 
	for 循环
	while 循环
[3] switch ... case 分支语句	
	格式： 
	switch (表达式) {
		case 常量表达式1:
			语句块1;
			break;     // 退出switch语句，break后边的代码不在执行
		case 常量表达式2:
			语句块2;
			break;
		......
		default:
			语句块n;
			break;
	}
	代码执行循序 
	表达式和常量表达式去匹配，如果匹配成功就会执行case后边的语句，
	遇到break之后，退出整个switch语句。	
	如果表示和case后边的常量表达式都不匹配执行default后边的语句。
	
	switch (表达式) {
		case 常量表达式1:
			语句块1;
		case 常量表达式2:
			语句块2;
			break;    // 退出switch语句，break后边的代码不在执行
		......
		default:
			语句块n;
			break;
	}
	表达式如果和常量表达式1匹配，先执行语句块1，由于没有break语句，
	会继续执行语句块2，直到遇到break才会退出整个switch语句。
	
	
	案例：输入月份，判断月份有多少天，使用switch...case语句
	参考代码：09switch.c
	#include <stdio.h>

	int main(int argc, const char *argv[])
	{
		int year, mouth;
		printf("please input year and mouth > ");
		scanf("%d%d", &year, &mouth);
		switch(mouth) {
		case 1:
		case 3:
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			printf("%d mouth 31 days\n", mouth);
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			printf("%d mouth 30 days\n",mouth);
			break;
		case 2:
			if ((year % 4 == 0 && year % 100 != 0) || 
					(year % 100 == 0 && year % 400 == 0)) {
				printf("%d mouth 29 days\n", mouth);
			} else {
				printf("%d mouth 28 days\n", mouth);
			}
			break;
		default:
			printf("ERROR\n");
			break;
		}                                                                                                                                                                                                                                                                   
		return 0;
	}
	
	
	练习题：  使用switch case语句实现。
	90 - 100   A
	80 - 89    B
	70 - 79    C 
	60 - 69    D
	0  - 59    E
	
	参考代码：10score.c
	
	练习时间到：  16：20
	
[4] for循环语句的使用	
	语法格式： 
	for (表达式1; 表达式2; 表达式3) {
		语句块4;
	}
	
	执行表达式1， 对表达式2进行判断，如果表达式2成立，执行语句块，
	如果表达式2不成立，执行退出for循环，

	如果表达式2成立，先执行语句块，在执行表达式3，再次执行表达式2，
	判断表达式2是否成立，如果表达式2成立，执行语句块，
	如果表达式2不成立，执行退出for循环，
	
	[1,2]   [3,2]     [3,2]    [3,2].......
	  / \     / \       / \ 
	 1   0   1   0     1   0               1 表示成立  0表示不成立
	 |   |   |   |     |   |
	 4  exit 4  exit   4  exit

	练习题： 使用for循环计算0-100的和
	11for.c 


	练习题： 使用for循环打印以下图像：
	*
	**
	***
	****
	*****
	知识：for循环嵌套

	for (表达式1; 表达式2; 表达式3) {  行
		for (表达式1; 表达式2; 表达式3) {  列
			语句块4;
		}
	}
	
	作业： 
	使用for循环的嵌套打印九九乘法表 
	1 * 1 = 1
	1 * 2 = 2  2 * 2 = 4
	.....
	
	
	
	
	
	
	


